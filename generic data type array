#include<bits/stdc++.h>
using namespace std;
template<class T>
class Array{
private:
    T *A;
    int size;
    int length;
public:
    Array()
    {
        size = 10;
        A = new T[10];
        length = 0;
    }
    Array(int sz)
    {
        size = sz;
        A = new T[sz];
        length = 0;
    }
    ~Array()
    {
        delete []A;
    }
    T Delete(int index);
    void Insert(int index,T x);
    void Display();
};
template<class T>
T Array<T>::Delete(int index)
{
    T c = A[index];
    if(index>=0 && index<=length)
    {   
        for (int i = index; i <length; i++)
        {
            A[i]=A[i+1];
        }
        length--;
        return c;
    }
}
template<class T>
void Array<T>::Display()
{
    for(int i = 0;i<length;i++)
    {
        cout<<A[i]<<endl;
    }
}
template<class T>
void Array<T>::Insert(int index,T x)
{
    if(index>=0 && index <=length)
    {
        for (int i = length; i>index ; i--)
        {
        A[i]=A[i-1];
        }
    }
   
    A[index] = x;
    length++;
}
int main()
{   
    Array<char> arr(10);
    arr.Insert(0,'a');
    arr.Insert(1,'b');
    arr.Insert(2,'c');
    arr.Display();
    arr.Delete(0);
    arr.Display();
    return 0 ;
};
